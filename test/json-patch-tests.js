/*
   DO NOT EDIT
   generated by scripts/make-json-patch-tests
*/

'use strict'

var assert = require('assert')
var patch = require('../lib/patch')
var apply = patch.patch
var revert = patch.revert
var clone = require('json8-core').clone

describe('json-patch/json-patch-tests', function() {
describe("4.1. add with missing object", function() {
it('throws an error', function() {
  var test = {"comment":"4.1. add with missing object","doc":{"q":{"bar":2}},"patch":[{"op":"add","path":"/a/b","value":1}],"error":"path /a does not exist -- missing objects are not created recursively"}
  assert.throws(function() {
    apply(clone(test.doc), test.patch)
  })
})


it('reverts the document to its original state if an error was thrown', function() {
  var test = {"comment":"4.1. add with missing object","doc":{"q":{"bar":2}},"patch":[{"op":"add","path":"/a/b","value":1}],"error":"path /a does not exist -- missing objects are not created recursively"}
  var doc = clone(test.doc)
  assert.throws(function() {
    apply(doc, test.patch)
  })
  assert.deepEqual(doc, test.doc)
})
})
describe("A.1.  Adding an Object Member", function() {
it('applies the patch', function() {
  var test = {"comment":"A.1.  Adding an Object Member","doc":{"foo":"bar"},"patch":[{"op":"add","path":"/baz","value":"qux"}],"expected":{"baz":"qux","foo":"bar"}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"A.1.  Adding an Object Member","doc":{"foo":"bar"},"patch":[{"op":"add","path":"/baz","value":"qux"}],"expected":{"baz":"qux","foo":"bar"}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("A.2.  Adding an Array Element", function() {
it('applies the patch', function() {
  var test = {"comment":"A.2.  Adding an Array Element","doc":{"foo":["bar","baz"]},"patch":[{"op":"add","path":"/foo/1","value":"qux"}],"expected":{"foo":["bar","qux","baz"]}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"A.2.  Adding an Array Element","doc":{"foo":["bar","baz"]},"patch":[{"op":"add","path":"/foo/1","value":"qux"}],"expected":{"foo":["bar","qux","baz"]}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("A.3.  Removing an Object Member", function() {
it('applies the patch', function() {
  var test = {"comment":"A.3.  Removing an Object Member","doc":{"baz":"qux","foo":"bar"},"patch":[{"op":"remove","path":"/baz"}],"expected":{"foo":"bar"}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"A.3.  Removing an Object Member","doc":{"baz":"qux","foo":"bar"},"patch":[{"op":"remove","path":"/baz"}],"expected":{"foo":"bar"}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("A.4.  Removing an Array Element", function() {
it('applies the patch', function() {
  var test = {"comment":"A.4.  Removing an Array Element","doc":{"foo":["bar","qux","baz"]},"patch":[{"op":"remove","path":"/foo/1"}],"expected":{"foo":["bar","baz"]}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"A.4.  Removing an Array Element","doc":{"foo":["bar","qux","baz"]},"patch":[{"op":"remove","path":"/foo/1"}],"expected":{"foo":["bar","baz"]}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("A.5.  Replacing a Value", function() {
it('applies the patch', function() {
  var test = {"comment":"A.5.  Replacing a Value","doc":{"baz":"qux","foo":"bar"},"patch":[{"op":"replace","path":"/baz","value":"boo"}],"expected":{"baz":"boo","foo":"bar"}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"A.5.  Replacing a Value","doc":{"baz":"qux","foo":"bar"},"patch":[{"op":"replace","path":"/baz","value":"boo"}],"expected":{"baz":"boo","foo":"bar"}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("A.6.  Moving a Value", function() {
it('applies the patch', function() {
  var test = {"comment":"A.6.  Moving a Value","doc":{"foo":{"bar":"baz","waldo":"fred"},"qux":{"corge":"grault"}},"patch":[{"op":"move","from":"/foo/waldo","path":"/qux/thud"}],"expected":{"foo":{"bar":"baz"},"qux":{"corge":"grault","thud":"fred"}}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"A.6.  Moving a Value","doc":{"foo":{"bar":"baz","waldo":"fred"},"qux":{"corge":"grault"}},"patch":[{"op":"move","from":"/foo/waldo","path":"/qux/thud"}],"expected":{"foo":{"bar":"baz"},"qux":{"corge":"grault","thud":"fred"}}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("A.7.  Moving an Array Element", function() {
it('applies the patch', function() {
  var test = {"comment":"A.7.  Moving an Array Element","doc":{"foo":["all","grass","cows","eat"]},"patch":[{"op":"move","from":"/foo/1","path":"/foo/3"}],"expected":{"foo":["all","cows","eat","grass"]}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"A.7.  Moving an Array Element","doc":{"foo":["all","grass","cows","eat"]},"patch":[{"op":"move","from":"/foo/1","path":"/foo/3"}],"expected":{"foo":["all","cows","eat","grass"]}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("A.8.  Testing a Value: Success", function() {
it('applies the patch', function() {
  var test = {"comment":"A.8.  Testing a Value: Success","doc":{"baz":"qux","foo":["a",2,"c"]},"patch":[{"op":"test","path":"/baz","value":"qux"},{"op":"test","path":"/foo/1","value":2}],"expected":{"baz":"qux","foo":["a",2,"c"]}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"A.8.  Testing a Value: Success","doc":{"baz":"qux","foo":["a",2,"c"]},"patch":[{"op":"test","path":"/baz","value":"qux"},{"op":"test","path":"/foo/1","value":2}],"expected":{"baz":"qux","foo":["a",2,"c"]}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("A.9.  Testing a Value: Error", function() {
it('throws an error', function() {
  var test = {"comment":"A.9.  Testing a Value: Error","doc":{"baz":"qux"},"patch":[{"op":"test","path":"/baz","value":"bar"}],"error":"string not equivalent"}
  assert.throws(function() {
    apply(clone(test.doc), test.patch)
  })
})


it('reverts the document to its original state if an error was thrown', function() {
  var test = {"comment":"A.9.  Testing a Value: Error","doc":{"baz":"qux"},"patch":[{"op":"test","path":"/baz","value":"bar"}],"error":"string not equivalent"}
  var doc = clone(test.doc)
  assert.throws(function() {
    apply(doc, test.patch)
  })
  assert.deepEqual(doc, test.doc)
})
})
describe("A.10.  Adding a nested Member Object", function() {
it('applies the patch', function() {
  var test = {"comment":"A.10.  Adding a nested Member Object","doc":{"foo":"bar"},"patch":[{"op":"add","path":"/child","value":{"grandchild":{}}}],"expected":{"foo":"bar","child":{"grandchild":{}}}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"A.10.  Adding a nested Member Object","doc":{"foo":"bar"},"patch":[{"op":"add","path":"/child","value":{"grandchild":{}}}],"expected":{"foo":"bar","child":{"grandchild":{}}}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("A.11.  Ignoring Unrecognized Elements", function() {
it('applies the patch', function() {
  var test = {"comment":"A.11.  Ignoring Unrecognized Elements","doc":{"foo":"bar"},"patch":[{"op":"add","path":"/baz","value":"qux","xyz":123}],"expected":{"foo":"bar","baz":"qux"}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"A.11.  Ignoring Unrecognized Elements","doc":{"foo":"bar"},"patch":[{"op":"add","path":"/baz","value":"qux","xyz":123}],"expected":{"foo":"bar","baz":"qux"}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("A.12.  Adding to a Non-existent Target", function() {
it('throws an error', function() {
  var test = {"comment":"A.12.  Adding to a Non-existent Target","doc":{"foo":"bar"},"patch":[{"op":"add","path":"/baz/bat","value":"qux"}],"error":"add to a non-existent target"}
  assert.throws(function() {
    apply(clone(test.doc), test.patch)
  })
})


it('reverts the document to its original state if an error was thrown', function() {
  var test = {"comment":"A.12.  Adding to a Non-existent Target","doc":{"foo":"bar"},"patch":[{"op":"add","path":"/baz/bat","value":"qux"}],"error":"add to a non-existent target"}
  var doc = clone(test.doc)
  assert.throws(function() {
    apply(doc, test.patch)
  })
  assert.deepEqual(doc, test.doc)
})
})
describe("A.14. ~ Escape Ordering", function() {
it('applies the patch', function() {
  var test = {"comment":"A.14. ~ Escape Ordering","doc":{"/":9,"~1":10},"patch":[{"op":"test","path":"/~01","value":10}],"expected":{"/":9,"~1":10}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"A.14. ~ Escape Ordering","doc":{"/":9,"~1":10},"patch":[{"op":"test","path":"/~01","value":10}],"expected":{"/":9,"~1":10}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("A.15. Comparing Strings and Numbers", function() {
it('throws an error', function() {
  var test = {"comment":"A.15. Comparing Strings and Numbers","doc":{"/":9,"~1":10},"patch":[{"op":"test","path":"/~01","value":"10"}],"error":"number is not equal to string"}
  assert.throws(function() {
    apply(clone(test.doc), test.patch)
  })
})


it('reverts the document to its original state if an error was thrown', function() {
  var test = {"comment":"A.15. Comparing Strings and Numbers","doc":{"/":9,"~1":10},"patch":[{"op":"test","path":"/~01","value":"10"}],"error":"number is not equal to string"}
  var doc = clone(test.doc)
  assert.throws(function() {
    apply(doc, test.patch)
  })
  assert.deepEqual(doc, test.doc)
})
})
describe("A.16. Adding an Array Value", function() {
it('applies the patch', function() {
  var test = {"comment":"A.16. Adding an Array Value","doc":{"foo":["bar"]},"patch":[{"op":"add","path":"/foo/-","value":["abc","def"]}],"expected":{"foo":["bar",["abc","def"]]}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"A.16. Adding an Array Value","doc":{"foo":["bar"]},"patch":[{"op":"add","path":"/foo/-","value":["abc","def"]}],"expected":{"foo":["bar",["abc","def"]]}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("empty list, empty docs", function() {
it('applies the patch', function() {
  var test = {"comment":"empty list, empty docs","doc":{},"patch":[],"expected":{}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"empty list, empty docs","doc":{},"patch":[],"expected":{}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("empty patch list", function() {
it('applies the patch', function() {
  var test = {"comment":"empty patch list","doc":{"foo":1},"patch":[],"expected":{"foo":1}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"empty patch list","doc":{"foo":1},"patch":[],"expected":{"foo":1}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("rearrangements OK?", function() {
it('applies the patch', function() {
  var test = {"comment":"rearrangements OK?","doc":{"foo":1,"bar":2},"patch":[],"expected":{"bar":2,"foo":1}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"rearrangements OK?","doc":{"foo":1,"bar":2},"patch":[],"expected":{"bar":2,"foo":1}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("rearrangements OK?  How about one level down ... array", function() {
it('applies the patch', function() {
  var test = {"comment":"rearrangements OK?  How about one level down ... array","doc":[{"foo":1,"bar":2}],"patch":[],"expected":[{"bar":2,"foo":1}]}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"rearrangements OK?  How about one level down ... array","doc":[{"foo":1,"bar":2}],"patch":[],"expected":[{"bar":2,"foo":1}]}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("rearrangements OK?  How about one level down...", function() {
it('applies the patch', function() {
  var test = {"comment":"rearrangements OK?  How about one level down...","doc":{"foo":{"foo":1,"bar":2}},"patch":[],"expected":{"foo":{"bar":2,"foo":1}}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"rearrangements OK?  How about one level down...","doc":{"foo":{"foo":1,"bar":2}},"patch":[],"expected":{"foo":{"bar":2,"foo":1}}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("add replaces any existing field", function() {
it('applies the patch', function() {
  var test = {"comment":"add replaces any existing field","doc":{"foo":null},"patch":[{"op":"add","path":"/foo","value":1}],"expected":{"foo":1}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"add replaces any existing field","doc":{"foo":null},"patch":[{"op":"add","path":"/foo","value":1}],"expected":{"foo":1}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("toplevel array", function() {
it('applies the patch', function() {
  var test = {"comment":"toplevel array","doc":[],"patch":[{"op":"add","path":"/0","value":"foo"}],"expected":["foo"]}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"toplevel array","doc":[],"patch":[{"op":"add","path":"/0","value":"foo"}],"expected":["foo"]}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("toplevel array, no change", function() {
it('applies the patch', function() {
  var test = {"comment":"toplevel array, no change","doc":["foo"],"patch":[],"expected":["foo"]}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"toplevel array, no change","doc":["foo"],"patch":[],"expected":["foo"]}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("toplevel object, numeric string", function() {
it('applies the patch', function() {
  var test = {"comment":"toplevel object, numeric string","doc":{},"patch":[{"op":"add","path":"/foo","value":"1"}],"expected":{"foo":"1"}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"toplevel object, numeric string","doc":{},"patch":[{"op":"add","path":"/foo","value":"1"}],"expected":{"foo":"1"}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("toplevel object, integer", function() {
it('applies the patch', function() {
  var test = {"comment":"toplevel object, integer","doc":{},"patch":[{"op":"add","path":"/foo","value":1}],"expected":{"foo":1}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"toplevel object, integer","doc":{},"patch":[{"op":"add","path":"/foo","value":1}],"expected":{"foo":1}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("Add, / target", function() {
it('applies the patch', function() {
  var test = {"comment":"Add, / target","doc":{},"patch":[{"op":"add","path":"/","value":1}],"expected":{"":1}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"Add, / target","doc":{},"patch":[{"op":"add","path":"/","value":1}],"expected":{"":1}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("Add composite value at top level", function() {
it('applies the patch', function() {
  var test = {"comment":"Add composite value at top level","doc":{"foo":1},"patch":[{"op":"add","path":"/bar","value":[1,2]}],"expected":{"foo":1,"bar":[1,2]}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"Add composite value at top level","doc":{"foo":1},"patch":[{"op":"add","path":"/bar","value":[1,2]}],"expected":{"foo":1,"bar":[1,2]}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("Add into composite value", function() {
it('applies the patch', function() {
  var test = {"comment":"Add into composite value","doc":{"foo":1,"baz":[{"qux":"hello"}]},"patch":[{"op":"add","path":"/baz/0/foo","value":"world"}],"expected":{"foo":1,"baz":[{"qux":"hello","foo":"world"}]}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"Add into composite value","doc":{"foo":1,"baz":[{"qux":"hello"}]},"patch":[{"op":"add","path":"/baz/0/foo","value":"world"}],"expected":{"foo":1,"baz":[{"qux":"hello","foo":"world"}]}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("no description", function() {
it('throws an error', function() {
  var test = {"doc":{"bar":[1,2]},"patch":[{"op":"add","path":"/bar/8","value":"5"}],"error":"Out of bounds (upper)"}
  assert.throws(function() {
    apply(clone(test.doc), test.patch)
  })
})


it('reverts the document to its original state if an error was thrown', function() {
  var test = {"doc":{"bar":[1,2]},"patch":[{"op":"add","path":"/bar/8","value":"5"}],"error":"Out of bounds (upper)"}
  var doc = clone(test.doc)
  assert.throws(function() {
    apply(doc, test.patch)
  })
  assert.deepEqual(doc, test.doc)
})
})
describe("no description", function() {
it('throws an error', function() {
  var test = {"doc":{"bar":[1,2]},"patch":[{"op":"add","path":"/bar/-1","value":"5"}],"error":"Out of bounds (lower)"}
  assert.throws(function() {
    apply(clone(test.doc), test.patch)
  })
})


it('reverts the document to its original state if an error was thrown', function() {
  var test = {"doc":{"bar":[1,2]},"patch":[{"op":"add","path":"/bar/-1","value":"5"}],"error":"Out of bounds (lower)"}
  var doc = clone(test.doc)
  assert.throws(function() {
    apply(doc, test.patch)
  })
  assert.deepEqual(doc, test.doc)
})
})
describe("no description", function() {
it('applies the patch', function() {
  var test = {"doc":{"foo":1},"patch":[{"op":"add","path":"/bar","value":true}],"expected":{"foo":1,"bar":true}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"doc":{"foo":1},"patch":[{"op":"add","path":"/bar","value":true}],"expected":{"foo":1,"bar":true}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("no description", function() {
it('applies the patch', function() {
  var test = {"doc":{"foo":1},"patch":[{"op":"add","path":"/bar","value":false}],"expected":{"foo":1,"bar":false}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"doc":{"foo":1},"patch":[{"op":"add","path":"/bar","value":false}],"expected":{"foo":1,"bar":false}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("no description", function() {
it('applies the patch', function() {
  var test = {"doc":{"foo":1},"patch":[{"op":"add","path":"/bar","value":null}],"expected":{"foo":1,"bar":null}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"doc":{"foo":1},"patch":[{"op":"add","path":"/bar","value":null}],"expected":{"foo":1,"bar":null}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("0 can be an array index or object element name", function() {
it('applies the patch', function() {
  var test = {"comment":"0 can be an array index or object element name","doc":{"foo":1},"patch":[{"op":"add","path":"/0","value":"bar"}],"expected":{"0":"bar","foo":1}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"0 can be an array index or object element name","doc":{"foo":1},"patch":[{"op":"add","path":"/0","value":"bar"}],"expected":{"0":"bar","foo":1}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("no description", function() {
it('applies the patch', function() {
  var test = {"doc":["foo"],"patch":[{"op":"add","path":"/1","value":"bar"}],"expected":["foo","bar"]}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"doc":["foo"],"patch":[{"op":"add","path":"/1","value":"bar"}],"expected":["foo","bar"]}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("no description", function() {
it('applies the patch', function() {
  var test = {"doc":["foo","sil"],"patch":[{"op":"add","path":"/1","value":"bar"}],"expected":["foo","bar","sil"]}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"doc":["foo","sil"],"patch":[{"op":"add","path":"/1","value":"bar"}],"expected":["foo","bar","sil"]}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("no description", function() {
it('applies the patch', function() {
  var test = {"doc":["foo","sil"],"patch":[{"op":"add","path":"/0","value":"bar"}],"expected":["bar","foo","sil"]}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"doc":["foo","sil"],"patch":[{"op":"add","path":"/0","value":"bar"}],"expected":["bar","foo","sil"]}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("no description", function() {
it('applies the patch', function() {
  var test = {"doc":["foo","sil"],"patch":[{"op":"add","path":"/2","value":"bar"}],"expected":["foo","sil","bar"]}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"doc":["foo","sil"],"patch":[{"op":"add","path":"/2","value":"bar"}],"expected":["foo","sil","bar"]}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("test against implementation-specific numeric parsing", function() {
it('applies the patch', function() {
  var test = {"comment":"test against implementation-specific numeric parsing","doc":{"1e0":"foo"},"patch":[{"op":"test","path":"/1e0","value":"foo"}],"expected":{"1e0":"foo"}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"test against implementation-specific numeric parsing","doc":{"1e0":"foo"},"patch":[{"op":"test","path":"/1e0","value":"foo"}],"expected":{"1e0":"foo"}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("test with bad number should fail", function() {
it('throws an error', function() {
  var test = {"comment":"test with bad number should fail","doc":["foo","bar"],"patch":[{"op":"test","path":"/1e0","value":"bar"}],"error":"test op shouldn't get array element 1"}
  assert.throws(function() {
    apply(clone(test.doc), test.patch)
  })
})


it('reverts the document to its original state if an error was thrown', function() {
  var test = {"comment":"test with bad number should fail","doc":["foo","bar"],"patch":[{"op":"test","path":"/1e0","value":"bar"}],"error":"test op shouldn't get array element 1"}
  var doc = clone(test.doc)
  assert.throws(function() {
    apply(doc, test.patch)
  })
  assert.deepEqual(doc, test.doc)
})
})
describe("no description", function() {
it('throws an error', function() {
  var test = {"doc":["foo","sil"],"patch":[{"op":"add","path":"/bar","value":42}],"error":"Object operation on array target"}
  assert.throws(function() {
    apply(clone(test.doc), test.patch)
  })
})


it('reverts the document to its original state if an error was thrown', function() {
  var test = {"doc":["foo","sil"],"patch":[{"op":"add","path":"/bar","value":42}],"error":"Object operation on array target"}
  var doc = clone(test.doc)
  assert.throws(function() {
    apply(doc, test.patch)
  })
  assert.deepEqual(doc, test.doc)
})
})
describe("value in array add not flattened", function() {
it('applies the patch', function() {
  var test = {"doc":["foo","sil"],"patch":[{"op":"add","path":"/1","value":["bar","baz"]}],"expected":["foo",["bar","baz"],"sil"],"comment":"value in array add not flattened"}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"doc":["foo","sil"],"patch":[{"op":"add","path":"/1","value":["bar","baz"]}],"expected":["foo",["bar","baz"],"sil"],"comment":"value in array add not flattened"}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("no description", function() {
it('applies the patch', function() {
  var test = {"doc":{"foo":1,"bar":[1,2,3,4]},"patch":[{"op":"remove","path":"/bar"}],"expected":{"foo":1}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"doc":{"foo":1,"bar":[1,2,3,4]},"patch":[{"op":"remove","path":"/bar"}],"expected":{"foo":1}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("no description", function() {
it('applies the patch', function() {
  var test = {"doc":{"foo":1,"baz":[{"qux":"hello"}]},"patch":[{"op":"remove","path":"/baz/0/qux"}],"expected":{"foo":1,"baz":[{}]}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"doc":{"foo":1,"baz":[{"qux":"hello"}]},"patch":[{"op":"remove","path":"/baz/0/qux"}],"expected":{"foo":1,"baz":[{}]}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("no description", function() {
it('applies the patch', function() {
  var test = {"doc":{"foo":1,"baz":[{"qux":"hello"}]},"patch":[{"op":"replace","path":"/foo","value":[1,2,3,4]}],"expected":{"foo":[1,2,3,4],"baz":[{"qux":"hello"}]}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"doc":{"foo":1,"baz":[{"qux":"hello"}]},"patch":[{"op":"replace","path":"/foo","value":[1,2,3,4]}],"expected":{"foo":[1,2,3,4],"baz":[{"qux":"hello"}]}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("no description", function() {
it('applies the patch', function() {
  var test = {"doc":{"foo":[1,2,3,4],"baz":[{"qux":"hello"}]},"patch":[{"op":"replace","path":"/baz/0/qux","value":"world"}],"expected":{"foo":[1,2,3,4],"baz":[{"qux":"world"}]}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"doc":{"foo":[1,2,3,4],"baz":[{"qux":"hello"}]},"patch":[{"op":"replace","path":"/baz/0/qux","value":"world"}],"expected":{"foo":[1,2,3,4],"baz":[{"qux":"world"}]}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("no description", function() {
it('applies the patch', function() {
  var test = {"doc":["foo"],"patch":[{"op":"replace","path":"/0","value":"bar"}],"expected":["bar"]}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"doc":["foo"],"patch":[{"op":"replace","path":"/0","value":"bar"}],"expected":["bar"]}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("no description", function() {
it('applies the patch', function() {
  var test = {"doc":[""],"patch":[{"op":"replace","path":"/0","value":0}],"expected":[0]}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"doc":[""],"patch":[{"op":"replace","path":"/0","value":0}],"expected":[0]}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("no description", function() {
it('applies the patch', function() {
  var test = {"doc":[""],"patch":[{"op":"replace","path":"/0","value":true}],"expected":[true]}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"doc":[""],"patch":[{"op":"replace","path":"/0","value":true}],"expected":[true]}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("no description", function() {
it('applies the patch', function() {
  var test = {"doc":[""],"patch":[{"op":"replace","path":"/0","value":false}],"expected":[false]}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"doc":[""],"patch":[{"op":"replace","path":"/0","value":false}],"expected":[false]}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("no description", function() {
it('applies the patch', function() {
  var test = {"doc":[""],"patch":[{"op":"replace","path":"/0","value":null}],"expected":[null]}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"doc":[""],"patch":[{"op":"replace","path":"/0","value":null}],"expected":[null]}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("value in array replace not flattened", function() {
it('applies the patch', function() {
  var test = {"doc":["foo","sil"],"patch":[{"op":"replace","path":"/1","value":["bar","baz"]}],"expected":["foo",["bar","baz"]],"comment":"value in array replace not flattened"}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"doc":["foo","sil"],"patch":[{"op":"replace","path":"/1","value":["bar","baz"]}],"expected":["foo",["bar","baz"]],"comment":"value in array replace not flattened"}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("replace whole document", function() {
it('applies the patch', function() {
  var test = {"comment":"replace whole document","doc":{"foo":"bar"},"patch":[{"op":"replace","path":"","value":{"baz":"qux"}}],"expected":{"baz":"qux"}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"replace whole document","doc":{"foo":"bar"},"patch":[{"op":"replace","path":"","value":{"baz":"qux"}}],"expected":{"baz":"qux"}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("spurious patch properties", function() {
it('applies the patch', function() {
  var test = {"comment":"spurious patch properties","doc":{"foo":1},"patch":[{"op":"test","path":"/foo","value":1,"spurious":1}],"expected":{"foo":1}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"spurious patch properties","doc":{"foo":1},"patch":[{"op":"test","path":"/foo","value":1,"spurious":1}],"expected":{"foo":1}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("null value should be valid obj property", function() {
it('applies the patch', function() {
  var test = {"doc":{"foo":null},"patch":[{"op":"test","path":"/foo","value":null}],"comment":"null value should be valid obj property"}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"doc":{"foo":null},"patch":[{"op":"test","path":"/foo","value":null}],"comment":"null value should be valid obj property"}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("null value should be valid obj property to be replaced with something truthy", function() {
it('applies the patch', function() {
  var test = {"doc":{"foo":null},"patch":[{"op":"replace","path":"/foo","value":"truthy"}],"expected":{"foo":"truthy"},"comment":"null value should be valid obj property to be replaced with something truthy"}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"doc":{"foo":null},"patch":[{"op":"replace","path":"/foo","value":"truthy"}],"expected":{"foo":"truthy"},"comment":"null value should be valid obj property to be replaced with something truthy"}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("null value should be valid obj property to be moved", function() {
it('applies the patch', function() {
  var test = {"doc":{"foo":null},"patch":[{"op":"move","from":"/foo","path":"/bar"}],"expected":{"bar":null},"comment":"null value should be valid obj property to be moved"}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"doc":{"foo":null},"patch":[{"op":"move","from":"/foo","path":"/bar"}],"expected":{"bar":null},"comment":"null value should be valid obj property to be moved"}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("null value should be valid obj property to be copied", function() {
it('applies the patch', function() {
  var test = {"doc":{"foo":null},"patch":[{"op":"copy","from":"/foo","path":"/bar"}],"expected":{"foo":null,"bar":null},"comment":"null value should be valid obj property to be copied"}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"doc":{"foo":null},"patch":[{"op":"copy","from":"/foo","path":"/bar"}],"expected":{"foo":null,"bar":null},"comment":"null value should be valid obj property to be copied"}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("null value should be valid obj property to be removed", function() {
it('applies the patch', function() {
  var test = {"doc":{"foo":null},"patch":[{"op":"remove","path":"/foo"}],"expected":{},"comment":"null value should be valid obj property to be removed"}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"doc":{"foo":null},"patch":[{"op":"remove","path":"/foo"}],"expected":{},"comment":"null value should be valid obj property to be removed"}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("null value should still be valid obj property replace other value", function() {
it('applies the patch', function() {
  var test = {"doc":{"foo":"bar"},"patch":[{"op":"replace","path":"/foo","value":null}],"expected":{"foo":null},"comment":"null value should still be valid obj property replace other value"}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"doc":{"foo":"bar"},"patch":[{"op":"replace","path":"/foo","value":null}],"expected":{"foo":null},"comment":"null value should still be valid obj property replace other value"}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("test should pass despite rearrangement", function() {
it('applies the patch', function() {
  var test = {"doc":{"foo":{"foo":1,"bar":2}},"patch":[{"op":"test","path":"/foo","value":{"bar":2,"foo":1}}],"comment":"test should pass despite rearrangement"}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"doc":{"foo":{"foo":1,"bar":2}},"patch":[{"op":"test","path":"/foo","value":{"bar":2,"foo":1}}],"comment":"test should pass despite rearrangement"}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("test should pass despite (nested) rearrangement", function() {
it('applies the patch', function() {
  var test = {"doc":{"foo":[{"foo":1,"bar":2}]},"patch":[{"op":"test","path":"/foo","value":[{"bar":2,"foo":1}]}],"comment":"test should pass despite (nested) rearrangement"}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"doc":{"foo":[{"foo":1,"bar":2}]},"patch":[{"op":"test","path":"/foo","value":[{"bar":2,"foo":1}]}],"comment":"test should pass despite (nested) rearrangement"}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("test should pass - no error", function() {
it('applies the patch', function() {
  var test = {"doc":{"foo":{"bar":[1,2,5,4]}},"patch":[{"op":"test","path":"/foo","value":{"bar":[1,2,5,4]}}],"comment":"test should pass - no error"}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"doc":{"foo":{"bar":[1,2,5,4]}},"patch":[{"op":"test","path":"/foo","value":{"bar":[1,2,5,4]}}],"comment":"test should pass - no error"}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("no description", function() {
it('throws an error', function() {
  var test = {"doc":{"foo":{"bar":[1,2,5,4]}},"patch":[{"op":"test","path":"/foo","value":[1,2]}],"error":"test op should fail"}
  assert.throws(function() {
    apply(clone(test.doc), test.patch)
  })
})


it('reverts the document to its original state if an error was thrown', function() {
  var test = {"doc":{"foo":{"bar":[1,2,5,4]}},"patch":[{"op":"test","path":"/foo","value":[1,2]}],"error":"test op should fail"}
  var doc = clone(test.doc)
  assert.throws(function() {
    apply(doc, test.patch)
  })
  assert.deepEqual(doc, test.doc)
})
})
describe("Empty-string element", function() {
it('applies the patch', function() {
  var test = {"comment":"Empty-string element","doc":{"":1},"patch":[{"op":"test","path":"/","value":1}]}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"Empty-string element","doc":{"":1},"patch":[{"op":"test","path":"/","value":1}]}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("no description", function() {
it('applies the patch', function() {
  var test = {"doc":{"foo":["bar","baz"],"":0,"a/b":1,"c%d":2,"e^f":3,"g|h":4,"i\\j":5,"k\"l":6," ":7,"m~n":8},"patch":[{"op":"test","path":"/foo","value":["bar","baz"]},{"op":"test","path":"/foo/0","value":"bar"},{"op":"test","path":"/","value":0},{"op":"test","path":"/a~1b","value":1},{"op":"test","path":"/c%d","value":2},{"op":"test","path":"/e^f","value":3},{"op":"test","path":"/g|h","value":4},{"op":"test","path":"/i\\j","value":5},{"op":"test","path":"/k\"l","value":6},{"op":"test","path":"/ ","value":7},{"op":"test","path":"/m~0n","value":8}]}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"doc":{"foo":["bar","baz"],"":0,"a/b":1,"c%d":2,"e^f":3,"g|h":4,"i\\j":5,"k\"l":6," ":7,"m~n":8},"patch":[{"op":"test","path":"/foo","value":["bar","baz"]},{"op":"test","path":"/foo/0","value":"bar"},{"op":"test","path":"/","value":0},{"op":"test","path":"/a~1b","value":1},{"op":"test","path":"/c%d","value":2},{"op":"test","path":"/e^f","value":3},{"op":"test","path":"/g|h","value":4},{"op":"test","path":"/i\\j","value":5},{"op":"test","path":"/k\"l","value":6},{"op":"test","path":"/ ","value":7},{"op":"test","path":"/m~0n","value":8}]}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("Move to same location has no effect", function() {
it('applies the patch', function() {
  var test = {"comment":"Move to same location has no effect","doc":{"foo":1},"patch":[{"op":"move","from":"/foo","path":"/foo"}],"expected":{"foo":1}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"Move to same location has no effect","doc":{"foo":1},"patch":[{"op":"move","from":"/foo","path":"/foo"}],"expected":{"foo":1}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("no description", function() {
it('applies the patch', function() {
  var test = {"doc":{"foo":1,"baz":[{"qux":"hello"}]},"patch":[{"op":"move","from":"/foo","path":"/bar"}],"expected":{"baz":[{"qux":"hello"}],"bar":1}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"doc":{"foo":1,"baz":[{"qux":"hello"}]},"patch":[{"op":"move","from":"/foo","path":"/bar"}],"expected":{"baz":[{"qux":"hello"}],"bar":1}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("no description", function() {
it('applies the patch', function() {
  var test = {"doc":{"baz":[{"qux":"hello"}],"bar":1},"patch":[{"op":"move","from":"/baz/0/qux","path":"/baz/1"}],"expected":{"baz":[{},"hello"],"bar":1}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"doc":{"baz":[{"qux":"hello"}],"bar":1},"patch":[{"op":"move","from":"/baz/0/qux","path":"/baz/1"}],"expected":{"baz":[{},"hello"],"bar":1}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("no description", function() {
it('applies the patch', function() {
  var test = {"doc":{"baz":[{"qux":"hello"}],"bar":1},"patch":[{"op":"copy","from":"/baz/0","path":"/boo"}],"expected":{"baz":[{"qux":"hello"}],"bar":1,"boo":{"qux":"hello"}}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"doc":{"baz":[{"qux":"hello"}],"bar":1},"patch":[{"op":"copy","from":"/baz/0","path":"/boo"}],"expected":{"baz":[{"qux":"hello"}],"bar":1,"boo":{"qux":"hello"}}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("replacing the root of the document is possible with add", function() {
it('applies the patch', function() {
  var test = {"comment":"replacing the root of the document is possible with add","doc":{"foo":"bar"},"patch":[{"op":"add","path":"","value":{"baz":"qux"}}],"expected":{"baz":"qux"}}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"replacing the root of the document is possible with add","doc":{"foo":"bar"},"patch":[{"op":"add","path":"","value":{"baz":"qux"}}],"expected":{"baz":"qux"}}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("Adding to "/-" adds to the end of the array", function() {
it('applies the patch', function() {
  var test = {"comment":"Adding to \"/-\" adds to the end of the array","doc":[1,2],"patch":[{"op":"add","path":"/-","value":{"foo":["bar","baz"]}}],"expected":[1,2,{"foo":["bar","baz"]}]}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"Adding to \"/-\" adds to the end of the array","doc":[1,2],"patch":[{"op":"add","path":"/-","value":{"foo":["bar","baz"]}}],"expected":[1,2,{"foo":["bar","baz"]}]}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("Adding to "/-" adds to the end of the array, even n levels down", function() {
it('applies the patch', function() {
  var test = {"comment":"Adding to \"/-\" adds to the end of the array, even n levels down","doc":[1,2,[3,[4,5]]],"patch":[{"op":"add","path":"/2/1/-","value":{"foo":["bar","baz"]}}],"expected":[1,2,[3,[4,5,{"foo":["bar","baz"]}]]]}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"Adding to \"/-\" adds to the end of the array, even n levels down","doc":[1,2,[3,[4,5]]],"patch":[{"op":"add","path":"/2/1/-","value":{"foo":["bar","baz"]}}],"expected":[1,2,[3,[4,5,{"foo":["bar","baz"]}]]]}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("test remove with bad number should fail", function() {
it('throws an error', function() {
  var test = {"comment":"test remove with bad number should fail","doc":{"foo":1,"baz":[{"qux":"hello"}]},"patch":[{"op":"remove","path":"/baz/1e0/qux"}],"error":"remove op shouldn't remove from array with bad number"}
  assert.throws(function() {
    apply(clone(test.doc), test.patch)
  })
})


it('reverts the document to its original state if an error was thrown', function() {
  var test = {"comment":"test remove with bad number should fail","doc":{"foo":1,"baz":[{"qux":"hello"}]},"patch":[{"op":"remove","path":"/baz/1e0/qux"}],"error":"remove op shouldn't remove from array with bad number"}
  var doc = clone(test.doc)
  assert.throws(function() {
    apply(doc, test.patch)
  })
  assert.deepEqual(doc, test.doc)
})
})
describe("test remove on array", function() {
it('applies the patch', function() {
  var test = {"comment":"test remove on array","doc":[1,2,3,4],"patch":[{"op":"remove","path":"/0"}],"expected":[2,3,4]}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"test remove on array","doc":[1,2,3,4],"patch":[{"op":"remove","path":"/0"}],"expected":[2,3,4]}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("test repeated removes", function() {
it('applies the patch', function() {
  var test = {"comment":"test repeated removes","doc":[1,2,3,4],"patch":[{"op":"remove","path":"/1"},{"op":"remove","path":"/2"}],"expected":[1,3]}
  var r = apply(test.doc, test.patch)
  assert.deepEqual(r, test.expected)
})


it('reverts the patch', function() {
  var test = {"comment":"test repeated removes","doc":[1,2,3,4],"patch":[{"op":"remove","path":"/1"},{"op":"remove","path":"/2"}],"expected":[1,3]}
  var doc = clone(test.doc)
  var r = apply(doc, test.patch, {revert: true})
  assert.deepEqual(revert(r[0], r[1]), test.doc)
})
})
describe("test remove with bad index should fail", function() {
it('throws an error', function() {
  var test = {"comment":"test remove with bad index should fail","doc":[1,2,3,4],"patch":[{"op":"remove","path":"/1e0"}],"error":"remove op shouldn't remove from array with bad number"}
  assert.throws(function() {
    apply(clone(test.doc), test.patch)
  })
})


it('reverts the document to its original state if an error was thrown', function() {
  var test = {"comment":"test remove with bad index should fail","doc":[1,2,3,4],"patch":[{"op":"remove","path":"/1e0"}],"error":"remove op shouldn't remove from array with bad number"}
  var doc = clone(test.doc)
  assert.throws(function() {
    apply(doc, test.patch)
  })
  assert.deepEqual(doc, test.doc)
})
})
describe("test replace with bad number should fail", function() {
it('throws an error', function() {
  var test = {"comment":"test replace with bad number should fail","doc":[""],"patch":[{"op":"replace","path":"/1e0","value":false}],"error":"replace op shouldn't replace in array with bad number"}
  assert.throws(function() {
    apply(clone(test.doc), test.patch)
  })
})


it('reverts the document to its original state if an error was thrown', function() {
  var test = {"comment":"test replace with bad number should fail","doc":[""],"patch":[{"op":"replace","path":"/1e0","value":false}],"error":"replace op shouldn't replace in array with bad number"}
  var doc = clone(test.doc)
  assert.throws(function() {
    apply(doc, test.patch)
  })
  assert.deepEqual(doc, test.doc)
})
})
describe("test copy with bad number should fail", function() {
it('throws an error', function() {
  var test = {"comment":"test copy with bad number should fail","doc":{"baz":[1,2,3],"bar":1},"patch":[{"op":"copy","from":"/baz/1e0","path":"/boo"}],"error":"copy op shouldn't work with bad number"}
  assert.throws(function() {
    apply(clone(test.doc), test.patch)
  })
})


it('reverts the document to its original state if an error was thrown', function() {
  var test = {"comment":"test copy with bad number should fail","doc":{"baz":[1,2,3],"bar":1},"patch":[{"op":"copy","from":"/baz/1e0","path":"/boo"}],"error":"copy op shouldn't work with bad number"}
  var doc = clone(test.doc)
  assert.throws(function() {
    apply(doc, test.patch)
  })
  assert.deepEqual(doc, test.doc)
})
})
describe("test move with bad number should fail", function() {
it('throws an error', function() {
  var test = {"comment":"test move with bad number should fail","doc":{"foo":1,"baz":[1,2,3,4]},"patch":[{"op":"move","from":"/baz/1e0","path":"/foo"}],"error":"move op shouldn't work with bad number"}
  assert.throws(function() {
    apply(clone(test.doc), test.patch)
  })
})


it('reverts the document to its original state if an error was thrown', function() {
  var test = {"comment":"test move with bad number should fail","doc":{"foo":1,"baz":[1,2,3,4]},"patch":[{"op":"move","from":"/baz/1e0","path":"/foo"}],"error":"move op shouldn't work with bad number"}
  var doc = clone(test.doc)
  assert.throws(function() {
    apply(doc, test.patch)
  })
  assert.deepEqual(doc, test.doc)
})
})
describe("test add with bad number should fail", function() {
it('throws an error', function() {
  var test = {"comment":"test add with bad number should fail","doc":["foo","sil"],"patch":[{"op":"add","path":"/1e0","value":"bar"}],"error":"add op shouldn't add to array with bad number"}
  assert.throws(function() {
    apply(clone(test.doc), test.patch)
  })
})


it('reverts the document to its original state if an error was thrown', function() {
  var test = {"comment":"test add with bad number should fail","doc":["foo","sil"],"patch":[{"op":"add","path":"/1e0","value":"bar"}],"error":"add op shouldn't add to array with bad number"}
  var doc = clone(test.doc)
  assert.throws(function() {
    apply(doc, test.patch)
  })
  assert.deepEqual(doc, test.doc)
})
})
describe("missing 'value' parameter to add", function() {
it('throws an error', function() {
  var test = {"comment":"missing 'value' parameter to add","doc":[1],"patch":[{"op":"add","path":"/-"}],"error":"missing 'value' parameter"}
  assert.throws(function() {
    apply(clone(test.doc), test.patch)
  })
})


it('reverts the document to its original state if an error was thrown', function() {
  var test = {"comment":"missing 'value' parameter to add","doc":[1],"patch":[{"op":"add","path":"/-"}],"error":"missing 'value' parameter"}
  var doc = clone(test.doc)
  assert.throws(function() {
    apply(doc, test.patch)
  })
  assert.deepEqual(doc, test.doc)
})
})
describe("missing 'value' parameter to replace", function() {
it('throws an error', function() {
  var test = {"comment":"missing 'value' parameter to replace","doc":[1],"patch":[{"op":"replace","path":"/0"}],"error":"missing 'value' parameter"}
  assert.throws(function() {
    apply(clone(test.doc), test.patch)
  })
})


it('reverts the document to its original state if an error was thrown', function() {
  var test = {"comment":"missing 'value' parameter to replace","doc":[1],"patch":[{"op":"replace","path":"/0"}],"error":"missing 'value' parameter"}
  var doc = clone(test.doc)
  assert.throws(function() {
    apply(doc, test.patch)
  })
  assert.deepEqual(doc, test.doc)
})
})
describe("missing 'value' parameter to test", function() {
it('throws an error', function() {
  var test = {"comment":"missing 'value' parameter to test","doc":[null],"patch":[{"op":"test","path":"/0"}],"error":"missing 'value' parameter"}
  assert.throws(function() {
    apply(clone(test.doc), test.patch)
  })
})


it('reverts the document to its original state if an error was thrown', function() {
  var test = {"comment":"missing 'value' parameter to test","doc":[null],"patch":[{"op":"test","path":"/0"}],"error":"missing 'value' parameter"}
  var doc = clone(test.doc)
  assert.throws(function() {
    apply(doc, test.patch)
  })
  assert.deepEqual(doc, test.doc)
})
})
describe("missing value parameter to test - where undef is falsy", function() {
it('throws an error', function() {
  var test = {"comment":"missing value parameter to test - where undef is falsy","doc":[false],"patch":[{"op":"test","path":"/0"}],"error":"missing 'value' parameter"}
  assert.throws(function() {
    apply(clone(test.doc), test.patch)
  })
})


it('reverts the document to its original state if an error was thrown', function() {
  var test = {"comment":"missing value parameter to test - where undef is falsy","doc":[false],"patch":[{"op":"test","path":"/0"}],"error":"missing 'value' parameter"}
  var doc = clone(test.doc)
  assert.throws(function() {
    apply(doc, test.patch)
  })
  assert.deepEqual(doc, test.doc)
})
})
describe("missing from parameter to copy", function() {
it('throws an error', function() {
  var test = {"comment":"missing from parameter to copy","doc":[1],"patch":[{"op":"copy","path":"/-"}],"error":"missing 'from' parameter"}
  assert.throws(function() {
    apply(clone(test.doc), test.patch)
  })
})


it('reverts the document to its original state if an error was thrown', function() {
  var test = {"comment":"missing from parameter to copy","doc":[1],"patch":[{"op":"copy","path":"/-"}],"error":"missing 'from' parameter"}
  var doc = clone(test.doc)
  assert.throws(function() {
    apply(doc, test.patch)
  })
  assert.deepEqual(doc, test.doc)
})
})
describe("missing from parameter to move", function() {
it('throws an error', function() {
  var test = {"comment":"missing from parameter to move","doc":{"foo":1},"patch":[{"op":"move","path":""}],"error":"missing 'from' parameter"}
  assert.throws(function() {
    apply(clone(test.doc), test.patch)
  })
})


it('reverts the document to its original state if an error was thrown', function() {
  var test = {"comment":"missing from parameter to move","doc":{"foo":1},"patch":[{"op":"move","path":""}],"error":"missing 'from' parameter"}
  var doc = clone(test.doc)
  assert.throws(function() {
    apply(doc, test.patch)
  })
  assert.deepEqual(doc, test.doc)
})
})
describe("unrecognized op should fail", function() {
it('throws an error', function() {
  var test = {"comment":"unrecognized op should fail","doc":{"foo":1},"patch":[{"op":"spam","path":"/foo","value":1}],"error":"Unrecognized op 'spam'"}
  assert.throws(function() {
    apply(clone(test.doc), test.patch)
  })
})


it('reverts the document to its original state if an error was thrown', function() {
  var test = {"comment":"unrecognized op should fail","doc":{"foo":1},"patch":[{"op":"spam","path":"/foo","value":1}],"error":"Unrecognized op 'spam'"}
  var doc = clone(test.doc)
  assert.throws(function() {
    apply(doc, test.patch)
  })
  assert.deepEqual(doc, test.doc)
})
})

})
